/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   executor.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ugreyiro <ugreyiro@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/01/25 10:32:37 by ugreyiro          #+#    #+#             */
/*   Updated: 2021/02/04 22:24:31 by fmoaney          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "executor/executor.h"
#include "minishell.h"
#include "string.h"
#include "errno.h"
#include "fcntl.h"

int		execute_cd(char *new_path)
{
	int		res;

	res = chdir(new_path);
	if (res < 0)
		handle_cd_error(new_path);
	return (0);
}

int		execute_bin(t_cmd *cmd, char **envp)
{
	int pid;
	int	exec_ret;
	int	wait_status;

	pid = fork();
	if (pid == 0)
	{
		if (cmd->fl_pipe)
		{
			dup2(cmd->fd[1], 1);
			close(cmd->fd[0]);
			exec_ret = execve(cmd->args[0], cmd->args, envp);
			close(cmd->fd[1]);
		}
		else
			exec_ret = execve(cmd->args[0], cmd->args, envp);
		exit(0);
		return (exec_ret);
	}
	else if(pid < 0)
		exit(1);
	else
	{
		if (cmd->fl_pipe)
		{
			dup2(cmd->fd[0], 0);
			close(cmd->fd[1]);
		}
		wait(&wait_status);
		if (cmd->fl_pipe)
			close(cmd->fd[0]);
	}
	return (WEXITSTATUS(wait_status));
}

int		call_func(t_cmd *cmd, char **envp)
{
	char		**args;
	size_t		len;
	extern int	g_last_res;

	len = ft_strlen(cmd->command);
	args = cmd->args + 1;
	g_last_res = 0;
	if (ft_strncmp(cmd->command, "cd", len) == 0)
		g_last_res = execute_cd(args[0]);
	else if (ft_strncmp(cmd->command, "unset", len) == 0)
		g_last_res = ft_unset(args, &envp);
	else if (ft_strncmp(cmd->command, "export", len) == 0)
		g_last_res = ft_export(args, &envp);
	else if (ft_strncmp(cmd->command, "exit", len) == 0)
		g_last_res = ft_exit(args);
	else if (ft_strncmp(cmd->command, "echo", len) == 0)
		g_last_res = ft_echo(args);
	else if (ft_strncmp(cmd->command, "export", len) == 0)
		g_last_res = ft_export(args, &envp);
	else if (ft_strncmp(cmd->command, "env", len) == 0)
		g_last_res = ft_env(envp);
	else if (ft_strncmp(cmd->command, "pwd", len) == 0)
		g_last_res = ft_pwd();
	else
		return (-1);
	return (g_last_res);
}

int		execute_with_pipe(t_cmd *command, char **envp)
{
	int exec_ret;

	exec_ret = call_func(command, envp);
	if (exec_ret < 0)
		handle_error(WRONG_COMMAND, command->command);
	return (exec_ret);
}

int		execute_no_redirection(t_cmd *command, char **envp, int tmp_fd[])
{
	int exec_ret;
	
	dup2(tmp_fd[0], 0);
	dup2(tmp_fd[1], 1);
	exec_ret = call_func(command, envp);
	if (exec_ret < 0)
		handle_error(WRONG_COMMAND, command->command);
	return (exec_ret);
}

int		execute_with_redirection(t_cmd *cmd, char **envp, int tmp_fd[])
{

	if (cmd->file_in)
	{
		if (cmd->fl_append)
			cmd->fd[1] = open(cmd->file_in, O_CREAT | O_RDWR | O_APPEND, 0666);
		else
			cmd->fd[1] = open(cmd->file_in, O_CREAT | O_RDWR | O_TRUNC, 0666);
		if (cmd->fd[1] < 0)
		{
			handle_error(FD_ERROR, cmd->file_in);
			return (errno);
		}
		dup2(cmd->fd[1], 1);
		close(cmd->fd[1]);
	}
	else
	{
		cmd->fd[0] = open(cmd->file_out, O_RDONLY);
		if (cmd->fd[0] < 0)
		{
			handle_error(FD_ERROR, cmd->file_out);
			return (errno);
		}
		dup2(cmd->fd[0], 0);
		close(cmd->fd[0]);
	}
	return (execute_no_redirection(cmd, envp, tmp_fd));
}

void executor(t_cmd *cmd, char ***envp, s_tools *tools)
{
	extern int	g_last_res;

	signal(SIGINT, input_signal_handler);
	signal(SIGQUIT, input_signal_handler);
	if (cmd->fl_pipe)
	{
		pipe(cmd->fd);
		g_last_res = execute_with_pipe(cmd, *envp);
	}
	else if (cmd->file_in || cmd->file_out)
		g_last_res = execute_with_redirection(cmd, *envp, tools->tmp_fd);
	else
		g_last_res = execute_no_redirection(cmd, *envp, tools->tmp_fd);
}


